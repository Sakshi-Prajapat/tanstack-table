{"ast":null,"code":"var _jsxFileName = \"/home/lenovo/TypeScript+React/tsexample/src/components/TodoTable.tsx\",\n  _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport React from 'react';\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoTable = () => {\n  _s();\n  let data = localStorage.getItem(\"task\");\n  const tdata = JSON.parse(String(data));\n  console.log('tdata', tdata);\n\n  // const [todoData , setTodoData] = useState<ItodoData>()\n  const columns = [{\n    header: \"Name\",\n    accessorKey: \"name\",\n    footer: \"Name\"\n  }, {\n    header: \"Task\",\n    accessorKey: \"task\",\n    footer: \"Task\"\n  }, {\n    header: \"Done\",\n    accessorKey: \"isDone\"\n  }, {\n    header: \"Edit\"\n  }, {\n    header: \"Delete\"\n  }];\n  const todoData = useMemo(() => tdata, []);\n  console.log(tdata);\n  const table = useReactTable({\n    columns,\n    ...todoData,\n    getCoreRowModel: getCoreRowModel()\n  });\n  console.log(\"ROW\", table.getRowModel().rows);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        size: \"small\",\n        \"aria-label\": \"a dense table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: table.getHeaderGroups().map(headerGroup => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: headerGroup.headers.map(header => {\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: [\" \", flexRender(header.column.columnDef.header, header.getContext())]\n                }, header.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 25\n                }, this);\n              })\n            }, headerGroup.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoTable, \"E+MnhT1wEudLnxPoDpFk+5wpaNg=\", false, function () {\n  return [useReactTable];\n});\n_c = TodoTable;\nexport default TodoTable;\nvar _c;\n$RefreshReg$(_c, \"TodoTable\");","map":{"version":3,"names":["useMemo","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","React","useReactTable","getCoreRowModel","flexRender","jsxDEV","_jsxDEV","TodoTable","_s","data","localStorage","getItem","tdata","JSON","parse","String","console","log","columns","header","accessorKey","footer","todoData","table","getRowModel","rows","children","component","sx","minWidth","size","getHeaderGroups","map","headerGroup","headers","column","columnDef","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lenovo/TypeScript+React/tsexample/src/components/TodoTable.tsx"],"sourcesContent":["import { useMemo, useState } from 'react'\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport React from 'react'\nimport { createTable, useReactTable, getCoreRowModel, flexRender, ColumnDef, } from '@tanstack/react-table'\n\nconst TodoTable: React.FC = () => {\n  let data: string | null = localStorage.getItem(\"task\")\n  const tdata = JSON.parse(String(data));\n  console.log('tdata', tdata)\n\n  // const [todoData , setTodoData] = useState<ItodoData>()\n  const columns = [\n    {\n      header: \"Name\",\n      accessorKey: \"name\",\n      footer: \"Name\"\n    },\n    {\n      header: \"Task\",\n      accessorKey: \"task\",\n      footer: \"Task\"\n    },\n    {\n      header: \"Done\",\n      accessorKey: \"isDone\",\n\n    },\n    {\n      header: \"Edit\",\n\n    },\n    {\n      header: \"Delete\"\n    }\n  ]\n  const todoData = useMemo(() => tdata, [])\n\n  console.log(tdata)\n\n  const table = useReactTable({\n    columns,\n    ...todoData,\n    getCoreRowModel: getCoreRowModel(),\n\n  })\n  console.log(\"ROW\", table.getRowModel().rows)\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n          <TableHead>\n            {table.getHeaderGroups().map(headerGroup => {\n              return (\n                <TableRow key={headerGroup.id}>\n                  {\n                    headerGroup.headers.map(header => {\n                      return (\n\n                        <TableCell key={header.id}> {flexRender(header.column.columnDef.header, header.getContext())}</TableCell>\n\n                      )\n                    })\n                  }\n                </TableRow>\n              )\n            })}\n          </TableHead>\n          <TableBody>\n            {/* {table.getRowModel().rows.map(row => {\n              return (\n                <TableRow key={row.id}>\n                  {row.getVisibleCells().map(cell => {\n                    return (\n                      <TableCell key={cell.id}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              )\n            })} */}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n}\n\nexport default TodoTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}