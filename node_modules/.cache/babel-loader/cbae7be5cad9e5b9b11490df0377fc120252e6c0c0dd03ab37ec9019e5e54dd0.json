{"ast":null,"code":"var _jsxFileName = \"/home/lenovo/Tanstack/tanstack-table/src/components/TodoTable.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport React from 'react';\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';\nimport { Checkbox } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoTable = () => {\n  _s();\n  const [data, setData] = useState([]);\n\n  // console.log(\"Local Storage\",tdata)\n  // console.log(\"Converted Data\",data)\n\n  const api = async () => {\n    const data = await fetch(\"https://dummyjson.com/todos\");\n    const jsonData = await data.json();\n    console.log(\"Dataaa\", jsonData);\n    // const parseData = JSON.parse(String(jsonData.results))\n    setData(jsonData.todos);\n  };\n  useEffect(() => {\n    // let tdata = localStorage.getItem(\"task\");\n    // const data = JSON.parse(String(tdata));\n    api();\n  }, []);\n  // console.log(\"JSON\",data)\n\n  //   const handaleditclick =(id : string)=>{\n  //     console.log('ID---->',id);\n\n  //   }\n\n  const handleEditButton = id => {\n    console.log(id);\n  };\n  const columns = [{\n    header: \"Index\",\n    accessorKey: \"id\",\n    footer: \"Name\"\n  }, {\n    header: \"Todo\",\n    accessorKey: \"todo\",\n    footer: \"Task\"\n  }, {\n    header: \"Done\",\n    accessorKey: \"completed\",\n    cell: ({\n      row: {\n        original: {\n          completed\n        }\n      }\n    }) => {\n      return /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: completed,\n        inputProps: {\n          'aria-label': 'controlled'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 16\n      }, this);\n    }\n  }, {\n    header: \"Edit\",\n    // cell: ({ row: { id } }: \n    //   { row: { id :string}\n    //  }) => {\n    //   return (\n    //     // <Button variant='outlined' onClick={()=>{\n    //     //   handleEditButton(id)\n    //     // }} >Edit</Button>\n    //     console.log(id)\n    //   )\n    // }\n    cell: ({\n      row\n    }) => {\n      console.log(row);\n    }\n  }, {\n    header: \"Delete\"\n    // cell: ({ row: { index } }: \n    //  { row: { index :number}\n    // }) => {\n    //   console.log('ppppppppppp>',)\n    //   return (\n    //     <Button variant='outlined' onClick={()=>handalclick(index)}>Delete</Button>\n    //   )\n    // }\n  }];\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"30px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        size: \"small\",\n        \"aria-label\": \"a dense table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: table.getHeaderGroups().map(headerGroup => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: headerGroup.headers.map(header => {\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: flexRender(header.column.columnDef.header, header.getContext())\n                }, header.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 23\n                }, this);\n              })\n            }, headerGroup.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: table.getRowModel().rows.map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: row.getVisibleCells().map(cell => {\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: flexRender(cell.column.columnDef.cell, cell.getContext())\n                }, cell.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 21\n                }, this);\n              })\n            }, row.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this);\n};\n_s(TodoTable, \"pUWnQmcZOz89QyVq2XiI5FPydBA=\", false, function () {\n  return [useReactTable];\n});\n_c = TodoTable;\nexport default TodoTable;\nvar _c;\n$RefreshReg$(_c, \"TodoTable\");","map":{"version":3,"names":["useEffect","useState","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","React","useReactTable","getCoreRowModel","flexRender","Checkbox","jsxDEV","_jsxDEV","TodoTable","_s","data","setData","api","fetch","jsonData","json","console","log","todos","handleEditButton","id","columns","header","accessorKey","footer","cell","row","original","completed","checked","inputProps","fileName","_jsxFileName","lineNumber","columnNumber","table","style","padding","children","component","sx","minWidth","size","getHeaderGroups","map","headerGroup","headers","column","columnDef","getContext","getRowModel","rows","getVisibleCells","_c","$RefreshReg$"],"sources":["/home/lenovo/Tanstack/tanstack-table/src/components/TodoTable.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport React from 'react'\nimport { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table'\nimport { Button, Checkbox } from '@mui/material';\n\ntype TodoData = {\n  id : number,\n  todo : string,\n  completed : boolean,\n  usedId : number\n}\n\nconst TodoTable = () => {\n  const [data, setData] = useState<TodoData[]>([])\n\n  // console.log(\"Local Storage\",tdata)\n  // console.log(\"Converted Data\",data)\n\n  const api = async() =>{\n    const data = await fetch(\"https://dummyjson.com/todos\");\n    const jsonData = await data.json();\n    console.log(\"Dataaa\",jsonData)\n    // const parseData = JSON.parse(String(jsonData.results))\n    setData(jsonData.todos)\n  }\n  useEffect( () => {\n    // let tdata = localStorage.getItem(\"task\");\n    // const data = JSON.parse(String(tdata));\n    api()\n   \n  }, [])\n  // console.log(\"JSON\",data)\n\n  //   const handaleditclick =(id : string)=>{\n  //     console.log('ID---->',id);\n\n  //   }\n\n    const handleEditButton=(id : string)=>{\n        console.log(id)\n    }\n\nconst columns = [\n  {\n    header: \"Index\",\n    accessorKey: \"id\",\n    footer: \"Name\"\n  },\n  {\n    header: \"Todo\",\n    accessorKey: \"todo\",\n    footer: \"Task\"\n  },\n  {\n    header: \"Done\",\n    accessorKey: \"completed\",\n    cell : ({row : {original : {completed}}}:{\n      row : {\n        original : {\n          completed : boolean\n        }\n      }\n    } ) =>{\n       return( <Checkbox checked={completed} inputProps={{ 'aria-label': 'controlled' }} />)\n    }\n  },\n  {\n    header: \"Edit\",\n    // cell: ({ row: { id } }: \n    //   { row: { id :string}\n    //  }) => {\n    //   return (\n    //     // <Button variant='outlined' onClick={()=>{\n    //     //   handleEditButton(id)\n    //     // }} >Edit</Button>\n    //     console.log(id)\n    //   )\n    // }\n    cell : ({row } :  any) =>{\n      console.log(row)\n    }\n  },\n  {\n    header: \"Delete\",\n    // cell: ({ row: { index } }: \n    //  { row: { index :number}\n    // }) => {\n    //   console.log('ppppppppppp>',)\n    //   return (\n    //     <Button variant='outlined' onClick={()=>handalclick(index)}>Delete</Button>\n    //   )\n    // }\n  }\n\n];\n\n\n\nconst table = useReactTable({\n  data,\n  columns,\n  getCoreRowModel: getCoreRowModel(),\n});\n\nreturn (\n  <div style={{ padding: \"30px\" }}>\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          {table.getHeaderGroups().map(headerGroup => {\n            return (\n              <TableRow key={headerGroup.id}>\n                {\n                  headerGroup.headers.map(header => {\n                    return (\n\n                      <TableCell key={header.id}>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                      </TableCell>\n\n                    )\n                  })\n                }\n\n              </TableRow>\n\n            )\n          })}\n\n        </TableHead>\n        <TableBody>\n          {table.getRowModel().rows.map(row => {\n            return (\n              <TableRow key={row.id}>\n                {row.getVisibleCells().map(cell => {\n                  return (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext()\n                      )}\n                    </TableCell>\n\n                  )\n                })}\n\n              </TableRow>\n\n            )\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </div>\n)\n}\n\nexport default TodoTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}